*****************************************************************************************************************************
****************************************************        Shell        ****************************************************
*****************************************************************************************************************************


交互式（Interactive）：解释执行用户的命令，用户输入一条命令，Shell就解释执行一条
批处理（Batch）：用户事先写一个Shell脚本(Script)，其中有很多条命令，让Shell一次把这些命令执行完，而不必一条一条地敲命令
-----------------------------------------------------------------------------------------------------------------------------

Unix/Linux上常见的Shell脚本解释器有bash、sh、csh、ksh等，习惯上把它们称作一种Shell。我们常说有多少种Shell，其实说的是Shell脚本解释器
bash是Linux标准默认的shell
-----------------------------------------------------------------------------------------------------------------------------

解释型语言也被称作“脚本语言”。执行这类程序时，解释器(interpreter)需要读取我们编写的源代码(source code)，并将其转换成目标代码(object code)，再由计算机运行
-----------------------------------------------------------------------------------------------------------------------------

简单性：shell是一个高级语言；通过它，你可以简洁地表达复杂的操作
可移植性：使用POSIX所定义的功能，可以做到脚本无须修改就可在不同的系统上执行
开发容易：可以在短时间内完成一个功能强大又妤用的脚本
-----------------------------------------------------------------------------------------------------------------------------

不使用shell：
    资源密集型的任务，尤其在需要考虑效率时（比如，排序，hash等等）
    需要处理大任务的数学操作，尤其是浮点运算，精确运算，或者复杂的算术运算（这种情况一般使用C++或FORTRAN 来处理）
    有跨平台（操作系统）移植需求（一般使用C 或Java）
    复杂的应用，在必须使用结构化编程的时候（需要变量的类型检查，函数原型，等等）
    对于影响系统全局性的关键任务应用
    对于安全有很高要求的任务，比如你需要一个健壮的系统来防止入侵、破解、恶意破坏等等
    项目由连串的依赖的各个部分组成
    需要大规模的文件操作
    需要多维数组的支持
    需要数据结构的支持，比如链表或数等数据结构
    需要产生或操作图形化界面 GUI
    需要直接操作系统硬件
    需要 I/O 或socket 接口
    需要使用库或者遗留下来的老代码的接口
    私人的、闭源的应用（shell 脚本把代码就放在文本文件中，全世界都能看到）
-----------------------------------------------------------------------------------------------------------------------------

“#!” 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种Shell
#!/bin/bash
chmod +x ./test.sh  #使脚本具有执行权限
-----------------------------------------------------------------------------------------------------------------------------

echo
    命令用于向窗口输出文本
-----------------------------------------------------------------------------------------------------------------------------

定义变量时，变量名不加美元符号（$）
首个字符必须为字母（a-z，A-Z）
中间不能有空格，可以使用下划线（_）
不能使用标点符号
不能使用bash里的关键字（可用help命令查看保留关键字）
使用一个定义过的变量，只要在变量名前面加美元符号（$）即可
变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界
-----------------------------------------------------------------------------------------------------------------------------

readonly
    命令可以将变量定义为只读变量，只读变量的值不能被改变
-----------------------------------------------------------------------------------------------------------------------------

unset
    命令可以删除变量
-----------------------------------------------------------------------------------------------------------------------------

$$
    $ 表示当前Shell进程的ID，即pid
-----------------------------------------------------------------------------------------------------------------------------

$0
    当前脚本的文件名
-----------------------------------------------------------------------------------------------------------------------------

$n
    传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2
-----------------------------------------------------------------------------------------------------------------------------

$#
    传递给脚本或函数的参数个数
-----------------------------------------------------------------------------------------------------------------------------

$*
    传递给脚本或函数的所有参数
-----------------------------------------------------------------------------------------------------------------------------

$@
    传递给脚本或函数的所有参数。被双引号(" ")包含时，与 $* 稍有不同，$*为整体，$@个体拼接
-----------------------------------------------------------------------------------------------------------------------------

$?
    上个命令的退出状态，或函数的返回值。
-----------------------------------------------------------------------------------------------------------------------------

$$
    当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。
-----------------------------------------------------------------------------------------------------------------------------

for var in $*
do
    echo "$var"
done
    循环执行
-----------------------------------------------------------------------------------------------------------------------------

echo -e
这里 -e 表示对转义字符进行替换
    \\  反斜杠
    \a  警报，响铃
    \b  退格（删除键）
    \f  换页(FF)，将当前位置移到下页开头
    \n  换行
    \r  回车
    \t  水平制表符（tab键）
    \v  垂直制表符
可以使用 echo 命令的 -E 选项禁止转义，默认也是不转义的；使用 -n 选项可以禁止插入换行符
-----------------------------------------------------------------------------------------------------------------------------

`command`
    命令替换是指Shell可以先执行命令，将输出结果暂时保存，在适当的地方输出
    DATE=`date`
-----------------------------------------------------------------------------------------------------------------------------

可以使用的变量替换形式：
    ${var}
        变量本来的值
    ${var:-word}
        如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值
    ${var:=word}
        如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值设置为 word
    ${var:?message}
        如果变量 var 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量 var 是否可以被正常赋值，若此替换出现在Shell脚本中，那么脚本将停止运行
    ${var:+word}
        如果变量 var 被定义，那么返回 word，但不改变 var 的值
-----------------------------------------------------------------------------------------------------------------------------

原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用
表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样
乘号(*)前边必须加反斜杠(\)才能实现乘法运算
    +   加法    `expr $a + $b` 结果为 30
    -   减法    `expr $a - $b` 结果为 10
    *   乘法    `expr $a \* $b` 结果为  200
    /   除法    `expr $b / $a` 结果为 2
    %   取余    `expr $b % $a` 结果为 0
    =   赋值    a=$b 将把变量 b 的值赋给 a
    ==  相等。用于比较两个数字，相同则返回 true。   [ $a == $b ] 返回 false
    !=  不相等。用于比较两个数字，不相同则返回 true。   [ $a != $b ] 返回 true
-----------------------------------------------------------------------------------------------------------------------------

关系运算符只支持数字，不支持字符串，除非字符串的值是数字
    -eq     检测两个数是否相等，相等返回 true。                                                 [ $a -eq $b ] 返回 true
    -ne     检测两个数是否相等，不相等返回 true。                                               [ $a -ne $b ] 返回 true
    -gt     检测左边的数是否大于右边的，如果是，则返回 true。                                   [ $a -gt $b ] 返回 false
    -lt     检测左边的数是否小于右边的，如果是，则返回 true。                                   [ $a -lt $b ] 返回 true
    -ge     检测左边的数是否大等于右边的，如果是，则返回 true。                                 [ $a -ge $b ] 返回 false
    -le     检测左边的数是否小于等于右边的，如果是，则返回 true。                               [ $a -le $b ] 返回 true

    !   非运算，表达式为 true 则返回 false，否则返回 true。                                     [ ! false ] 返回 true
    -o  或运算，有一个表达式为 true 则返回 true。                                               [ $a -lt 20 -o $b -gt 100 ] 返回 true
    -a  与运算，两个表达式都为 true 才返回 true。                                               [ $a -lt 20 -a $b -gt 100 ] 返回 false

    =   检测两个字符串是否相等，相等返回 true。                                                 [ $a = $b ] 返回 false
    !=  检测两个字符串是否相等，不相等返回 true。                                               [ $a != $b ] 返回 true
    -z  检测字符串长度是否为0，为0返回 true。                                                   [ -z $a ] 返回 false
    -n  检测字符串长度是否为0，不为0返回 true。                                                 [ -z $a ] 返回 true
    str     检测字符串是否为空，不为空返回 true。                                               [ $a ] 返回 true

    -b file     检测文件是否是块设备文件，如果是，则返回 true。                                 [ -b $file ] 返回 false
    -c file     检测文件是否是字符设备文件，如果是，则返回 true。                               [ -b $file ] 返回 false
    -d file     检测文件是否是目录，如果是，则返回 true。                                       [ -d $file ] 返回 false
    -f file     检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。     [ -f $file ] 返回 true
    -g file     检测文件是否设置了 SGID 位，如果是，则返回 true。                               [ -g $file ] 返回 false
    -k file     检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。                     [ -k $file ] 返回 false
    -p file     检测文件是否是具名管道，如果是，则返回 true。                                   [ -p $file ] 返回 false
    -u file     检测文件是否设置了 SUID 位，如果是，则返回 true。                               [ -u $file ] 返回 false
    -r file     检测文件是否可读，如果是，则返回 true。                                         [ -r $file ] 返回 true
    -w file     检测文件是否可写，如果是，则返回 true。                                         [ -w $file ] 返回 true
    -x file     检测文件是否可执行，如果是，则返回 true。                                       [ -x $file ] 返回 true
    -s file     检测文件是否为空（文件大小是否大于0），不为空返回 true。                        [ -s $file ] 返回 true
    -e file     检测文件（包括目录）是否存在，如果是，则返回 true。                             [ -e $file ] 返回 true
-----------------------------------------------------------------------------------------------------------------------------

单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的
单引号字串中不能出现单引号（对单引号使用转义符后也不行）

双引号里可以有变量
双引号里可以出现转义字符
-----------------------------------------------------------------------------------------------------------------------------

 拼接字符串
     your_name="qinjx"
     greeting="hello, "$your_name" !"
     greeting_1="hello, ${your_name} !"
     echo $greeting $greeting_1
-----------------------------------------------------------------------------------------------------------------------------

 获取字符串长度
     string="abcd"
     echo ${#string} #输出 4
-----------------------------------------------------------------------------------------------------------------------------

 提取子字符串
     string="alibaba is a great company"
     echo ${string:1:4} #输出liba
-----------------------------------------------------------------------------------------------------------------------------

 查找子字符串
     string="alibaba is a great company"
     echo `expr index "$string" is`
-----------------------------------------------------------------------------------------------------------------------------

array_name=(
value0
value1
value2
value3
)

array_name[0]=value0
array_name[1]=value1
array_name[2]=value2
可以不使用连续的下标，而且下标的范围没有限制
-----------------------------------------------------------------------------------------------------------------------------

读取数组元素值的一般格式是：
    ${array_name[index]}
使用@ 或 * 可以获取数组中的所有元素，例如：
    ${array_name[*]}
    ${array_name[@]}
取得数组元素的个数
    length=${#array_name[@]}
或者
    length=${#array_name[*]}
取得数组单个元素的长度
    lengthn=${#array_name[n]}
-----------------------------------------------------------------------------------------------------------------------------

双引号可有可无，单引号主要用在原样输出中
-----------------------------------------------------------------------------------------------------------------------------

printf  format-string  [arguments...]
printf 命令不用加括号
format-string 可以没有引号，但最好加上，单引号双引号均可。
参数多于格式控制符(%)时，format-string 可以重用，可以将所有参数都转换。
arguments 使用空格分隔，不用逗号。
-----------------------------------------------------------------------------------------------------------------------------

# format-string为双引号
    $ printf "%d %s\n" 1 "abc"
    1 abc
# 单引号与双引号效果一样
    $ printf '%d %s\n' 1 "abc"
    1 abc
# 没有引号也可以输出
    $ printf %s abcdef
    abcdef
# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用
    $ printf %s abc def
    abcdef
$ printf "%s\n" abc def
    abc
    def
$ printf "%s %s %s\n" a b c d e f g h i j
    a b c
    d e f
    g h i
    j
# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替
    $ printf "%s and %d \n"
    and 0
# 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0
    $ printf "The first program always prints'%s,%d\n'" Hello Shell
    -bash: printf: Shell: invalid number
    The first program always prints 'Hello,0'
-----------------------------------------------------------------------------------------------------------------------------

if [ expression ]
then
    Statement(s) to be executed if expression is true
fi

if [ expression ]
then
    Statement(s) to be executed if expression is true
else
    Statement(s) to be executed if expression is not true
fi

if [ expression 1 ]
then
    Statement(s) to be executed if expression 1 is true
elif [ expression 2 ]
then
    Statement(s) to be executed if expression 2 is true
elif [ expression 3 ]
then
    Statement(s) to be executed if expression 3 is true
else
    Statement(s) to be executed if no expression is true
fi

test 命令用于检查某个条件是否成立，与方括号([ ])类似
-----------------------------------------------------------------------------------------------------------------------------

case 值 in
模式1)
    command1
    command2
    command3
    ;;
    模式2）
    command1
    command2
    command3
    ;;
    *)
    command1
    command2
    command3
    ;;
esac
-----------------------------------------------------------------------------------------------------------------------------

for 变量 in 列表
do
    command1
    command2
    ...
    commandN
done

while command
do
    Statement(s) to be executed if command is true
done

until command
do
    Statement(s) to be executed until command is true
done
-----------------------------------------------------------------------------------------------------------------------------

在嵌套循环中，break 命令后面还可以跟一个整数，表示跳出第几层循环
continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环
continue 后面也可以跟一个数字，表示跳出第几层循环
-----------------------------------------------------------------------------------------------------------------------------
